{
	"info": {
		"_postman_id": "42ff70cc-1d4d-434a-9837-9ee532a93789",
		"name": "petstore-happy-path",
		"description": "Author: Ricardo Toledo\n\nAutomation suite that covers a full happy path using all the endpoints in the for the sample Petsotre API.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "pet",
			"item": [
				{
					"name": "Add a new pet to the store",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"petID\", pm.variables.replaceIn('{{$timestamp}}'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{petName}}\",\n    \"photoUrls\": [\n        \"photoUrl1\",\n        \"photoUrl2\"\n    ],\n    \"id\": {{petID}},\n    \"category\": {\n        \"id\": 1,\n        \"name\": \"categoryName\"\n    },\n    \"tags\": [\n        {\n            \"id\": -63218653,\n            \"name\": \"pariatur anim\"\n        },\n        {\n            \"id\": 96594691,\n            \"name\": \"veniam\"\n        }\n    ],\n    \"status\": \"available\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/pet",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet"
							]
						},
						"description": "New pet with:\n\n{{petName} = hardcoded in first instance\n\n{{petId}} = randomly generated using timestamp"
					},
					"response": []
				},
				{
					"name": "Update an existing pet",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"petName\", pm.variables.replaceIn('{{$randomFirstName}}'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{petName}}\",\n    \"photoUrls\": [\n        \"photoUrl1Updated\",\n        \"photoUrl2Updated\"\n    ],\n    \"id\": {{petID}},\n    \"category\": {\n        \"id\": 1,\n        \"name\": \"categoryNameUpdated\"\n    },\n    \"tags\": [\n        {\n            \"id\": 34932781,\n            \"name\": \"Ut dolore\"\n        },\n        {\n            \"id\": 93600857,\n            \"name\": \"sint\"\n        }\n    ],\n    \"status\": \"pending\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/pet",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet"
							]
						},
						"description": "Update pet with:\n\n{{petName} = randomly generated name\n\n{{petId}} = from environment variable"
					},
					"response": [
						{
							"name": "Invalid ID supplied",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/pet",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Pet not found",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/pet",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Validation exception",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/pet",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet"
									]
								}
							},
							"status": "Method Not Allowed",
							"code": 405,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Finds Pets by status available",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/pet/findByStatus?status=available",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								"findByStatus"
							],
							"query": [
								{
									"key": "status",
									"value": "available",
									"description": "(Required) Status values that need to be considered for filter"
								}
							]
						},
						"description": "Multiple status values can be provided with comma separated strings"
					},
					"response": []
				},
				{
					"name": "Finds Pets by status pending",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/pet/findByStatus?status=pending",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								"findByStatus"
							],
							"query": [
								{
									"key": "status",
									"value": "pending",
									"description": "(Required) Status values that need to be considered for filter"
								}
							]
						},
						"description": "Multiple status values can be provided with comma separated strings"
					},
					"response": []
				},
				{
					"name": "Finds Pets by status sold",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/pet/findByStatus?status=sold",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								"findByStatus"
							],
							"query": [
								{
									"key": "status",
									"value": "sold",
									"description": "(Required) Status values that need to be considered for filter"
								}
							]
						},
						"description": "Multiple status values can be provided with comma separated strings"
					},
					"response": []
				},
				{
					"name": "Finds Pets by unregistered status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"pm.test(\"Empty response received (empty array)\", function () {",
									"    pm.expect(responseBody).to.be.an('array').that.is.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/pet/findByStatus?status=notRegisteredStatus",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								"findByStatus"
							],
							"query": [
								{
									"key": "status",
									"value": "notRegisteredStatus",
									"description": "(Required) Status values that need to be considered for filter"
								}
							]
						},
						"description": "Multiple status values can be provided with comma separated strings"
					},
					"response": []
				},
				{
					"name": "Find pet by ID",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "api_key",
									"type": "string"
								},
								{
									"key": "value",
									"value": "<API Key>",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "{{baseUrl}}/pet/:petId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								":petId"
							],
							"variable": [
								{
									"key": "petId",
									"value": "{{petID}}",
									"description": "(Required) ID of pet to return"
								}
							]
						},
						"description": "Returns a single pet"
					},
					"response": [
						{
							"name": "Invalid ID supplied",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "api_key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/pet/:petId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										":petId"
									],
									"variable": [
										{
											"key": "petId",
											"value": "45165249",
											"description": "(Required) ID of pet to return"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Pet not found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "api_key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/pet/:petId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										":petId"
									],
									"variable": [
										{
											"key": "petId",
											"value": "45165249",
											"description": "(Required) ID of pet to return"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Updates a pet in the store with form data",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"petName\", pm.variables.replaceIn('{{$randomFirstName}}'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "{{petName}}",
									"description": "Updated name of the pet"
								},
								{
									"key": "status",
									"value": "sold",
									"description": "Updated status of the pet"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/pet/:petId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								":petId"
							],
							"variable": [
								{
									"key": "petId",
									"value": "{{petID}}",
									"description": "(Required) ID of pet that needs to be updated"
								}
							]
						},
						"description": "{{petName}} = randomly generated new name"
					},
					"response": []
				},
				{
					"name": "Upload pet's image",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "multipart/form-data"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "additionalMetadata",
									"value": "Appa rules",
									"description": "Additional data to pass to server",
									"type": "text"
								},
								{
									"key": "file",
									"description": "file to upload",
									"type": "file",
									"src": "./appa.png"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/pet/:petId/uploadImage",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								":petId",
								"uploadImage"
							],
							"variable": [
								{
									"key": "petId",
									"value": "{{petID}}",
									"description": "(Required) ID of pet to update"
								}
							]
						}
					},
					"response": [
						{
							"name": "Invalid input - no file attached",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "additionalMetadata",
											"value": "in dolor ipsum dolore",
											"description": "Additional data to pass to server",
											"type": "text"
										},
										{
											"key": "file",
											"description": "file to upload",
											"type": "file",
											"src": []
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/pet/:petId/uploadImage",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										":petId",
										"uploadImage"
									],
									"variable": [
										{
											"key": "petId",
											"value": "45165249",
											"description": "(Required) ID of pet to update"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": -14769262,\n \"type\": \"velit ullamco sint \",\n \"message\": \"exercitation ea in\"\n}"
						}
					]
				},
				{
					"name": "Deletes a pet",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "api_key",
								"value": "sed"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/pet/:petId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								":petId"
							],
							"variable": [
								{
									"key": "petId",
									"value": "{{petID}}",
									"description": "(Required) Pet id to delete"
								}
							]
						}
					},
					"response": [
						{
							"name": "Invalid ID supplied",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"key": "api_key",
										"value": "sed"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/pet/:petId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										":petId"
									],
									"variable": [
										{
											"key": "petId",
											"value": "45165249",
											"description": "(Required) Pet id to delete"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Pet not found",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"key": "api_key",
										"value": "sed"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/pet/:petId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										":petId"
									],
									"variable": [
										{
											"key": "petId",
											"value": "45165249",
											"description": "(Required) Pet id to delete"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "store",
			"item": [
				{
					"name": "order",
					"item": [
						{
							"name": "Add a new pet to the store",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"petID\", pm.variables.replaceIn('{{$timestamp}}'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{petName}}\",\n    \"photoUrls\": [\n        \"photoUrl1\",\n        \"photoUrl2\"\n    ],\n    \"id\": {{petID}},\n    \"category\": {\n        \"id\": 1,\n        \"name\": \"categoryName\"\n    },\n    \"tags\": [\n        {\n            \"id\": -63218653,\n            \"name\": \"pariatur anim\"\n        },\n        {\n            \"id\": 96594691,\n            \"name\": \"veniam\"\n        }\n    ],\n    \"status\": \"available\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/pet",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet"
									]
								},
								"description": "New pet with:\n\n{{petName} = hardcoded in first instance\n\n{{petId}} = randomly generated using timestamp"
							},
							"response": []
						},
						{
							"name": "Place an order for a pet",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// randomTwoDigit = Math.floor((pm.variables.replaceIn('{{$randomInt}}') / 10));",
											"randomTwoDigit = _.random(11, 99);",
											"pm.environment.set(\"orderID\", randomTwoDigit);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": {{orderID}},\n    \"petId\": {{petID}},\n    \"quantity\": 1,\n    \"shipDate\": \"2015-12-12T09:26:23.246Z\",\n    \"status\": \"approved\",\n    \"complete\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/store/order",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order"
									]
								}
							},
							"response": [
								{
									"name": "Invalid Order",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": -67623381,\n    \"petId\": -69688564,\n    \"quantity\": -18403344,\n    \"shipDate\": \"2015-12-12T09:26:23.246Z\",\n    \"status\": \"approved\",\n    \"complete\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/store/order",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"store",
												"order"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Find purchase order by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/store/order/:orderId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order",
										":orderId"
									],
									"variable": [
										{
											"key": "orderId",
											"value": "{{orderID}}",
											"description": "(Required) ID of pet that needs to be fetched"
										}
									]
								},
								"description": "For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions"
							},
							"response": [
								{
									"name": "Invalid ID supplied",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/store/order/:orderId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"store",
												"order",
												":orderId"
											],
											"variable": [
												{
													"key": "orderId",
													"value": "8",
													"description": "(Required) ID of pet that needs to be fetched"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Order not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/store/order/:orderId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"store",
												"order",
												":orderId"
											],
											"variable": [
												{
													"key": "orderId",
													"value": "8",
													"description": "(Required) ID of pet that needs to be fetched"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Delete purchase order by ID",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/store/order/:orderId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order",
										":orderId"
									],
									"variable": [
										{
											"key": "orderId",
											"value": "{{orderID}}",
											"description": "(Required) ID of the order that needs to be deleted"
										}
									]
								},
								"description": "For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors"
							},
							"response": [
								{
									"name": "Invalid ID supplied",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/store/order/:orderId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"store",
												"order",
												":orderId"
											],
											"variable": [
												{
													"key": "orderId",
													"value": "29337363",
													"description": "(Required) ID of the order that needs to be deleted"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Order not found",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/store/order/:orderId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"store",
												"order",
												":orderId"
											],
											"variable": [
												{
													"key": "orderId",
													"value": "29337363",
													"description": "(Required) ID of the order that needs to be deleted"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "Returns pet inventories by status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"pm.test(\"Response is not empty\", function () {",
									"    pm.expect(responseBody).is.not.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "api_key",
									"type": "string"
								},
								{
									"key": "value",
									"value": "<API Key>",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/store/inventory",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"store",
								"inventory"
							]
						},
						"description": "Returns a map of status codes to quantities"
					},
					"response": []
				}
			]
		},
		{
			"name": "user",
			"item": [
				{
					"name": "Create user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/**",
									" * Creating and using an array of users object should be the ideal solution but postman",
									" * only uses global/environment variables in the request body and would have to extract",
									" * the dat to these variables so this is a simpler approach",
									"*/",
									"",
									"function setUsers (userNumber) {",
									"    if (userNumber == 1)",
									"        userNumber = \"\";",
									"    pm.environment.set(\"userID\" + userNumber, pm.variables.replaceIn('{{$timestamp}}'));",
									"    pm.environment.set(\"username\" + userNumber, pm.variables.replaceIn('{{$randomUserName}}'));",
									"    pm.environment.set(\"userFirstName\" + userNumber, pm.variables.replaceIn('{{$randomFirstName}}'));",
									"    pm.environment.set(\"userLastName\" + userNumber, pm.variables.replaceIn('{{$randomLastName}}'));",
									"    pm.environment.set(\"userEmail\" + userNumber, pm.variables.replaceIn('{{$randomEmail}}'));",
									"    pm.environment.set(\"userPassword\" + userNumber, pm.variables.replaceIn('{{$randomPassword}}'));",
									"    pm.environment.set(\"userPhone\" + userNumber, pm.variables.replaceIn('{{$randomPhoneNumber}}'));",
									"}",
									"",
									"let numberOfUsers = 1;",
									"setUsers(numberOfUsers);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "",
								"value": "",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"{{userID}}\",\n    \"username\": \"{{username}}\",\n    \"firstName\": \"{{userFirstName}}\",\n    \"lastName\": \"{{userLastName}}\",\n    \"email\": \"{{userEmail}}\",\n    \"password\": \"{{userPassword}}\",\n    \"phone\": \"{{userPhone}}\",\n    \"userStatus\": 785\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user"
							]
						},
						"description": "This can only be done by the logged in user."
					},
					"response": []
				},
				{
					"name": "Creates list of users with given input array",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function setUsers (userNumber) {",
									"    if (userNumber == 1)",
									"        userNumber = \"\";",
									"    pm.environment.set(\"userID\" + userNumber, pm.variables.replaceIn('{{$timestamp}}'));",
									"    pm.environment.set(\"username\" + userNumber, pm.variables.replaceIn('{{$randomUserName}}'));",
									"    pm.environment.set(\"userFirstName\" + userNumber, pm.variables.replaceIn('{{$randomFirstName}}'));",
									"    pm.environment.set(\"userLastName\" + userNumber, pm.variables.replaceIn('{{$randomLastName}}'));",
									"    pm.environment.set(\"userEmail\" + userNumber, pm.variables.replaceIn('{{$randomEmail}}'));",
									"    pm.environment.set(\"userPassword\" + userNumber, pm.variables.replaceIn('{{$randomPassword}}'));",
									"    pm.environment.set(\"userPhone\" + userNumber, pm.variables.replaceIn('{{$randomPhoneNumber}}'));",
									"}",
									"",
									"let numberOfUsers = 2;",
									"for(let i = 1; i <= numberOfUsers; i++)",
									"    setUsers(i)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"id\": \"{{userID}}\",\n        \"username\": \"{{username}}\",\n        \"firstName\": \"{{userFirstName}}\",\n        \"lastName\": \"{{userLastName}}\",\n        \"email\": \"{{userEmail}}\",\n        \"password\": \"{{userPassword}}\",\n        \"phone\": \"{{userPhone}}\",\n        \"userStatus\": 87845\n    },\n    {\n        \"id\": \"{{userID2}}\",\n        \"username\": \"{{username2}}\",\n        \"firstName\": \"{{userFirstName2}}\",\n        \"lastName\": \"{{userLastName2}}\",\n        \"email\": \"{{userEmail2}}\",\n        \"password\": \"{{userPassword2}}\",\n        \"phone\": \"{{userPhone2}}\",\n        \"userStatus\": 87846\n    }\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/createWithArray",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"createWithArray"
							]
						}
					},
					"response": []
				},
				{
					"name": "Creates list of users with given input array",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function setUsers (userNumber) {",
									"    if (userNumber == 1)",
									"        userNumber = \"\";",
									"    pm.environment.set(\"userID\" + userNumber, pm.variables.replaceIn('{{$timestamp}}'));",
									"    pm.environment.set(\"username\" + userNumber, pm.variables.replaceIn('{{$randomUserName}}'));",
									"    pm.environment.set(\"userFirstName\" + userNumber, pm.variables.replaceIn('{{$randomFirstName}}'));",
									"    pm.environment.set(\"userLastName\" + userNumber, pm.variables.replaceIn('{{$randomLastName}}'));",
									"    pm.environment.set(\"userEmail\" + userNumber, pm.variables.replaceIn('{{$randomEmail}}'));",
									"    pm.environment.set(\"userPassword\" + userNumber, pm.variables.replaceIn('{{$randomPassword}}'));",
									"    pm.environment.set(\"userPhone\" + userNumber, pm.variables.replaceIn('{{$randomPhoneNumber}}'));",
									"}",
									"",
									"let numberOfUsers = 2;",
									"for(let i = 1; i <= numberOfUsers; i++)",
									"    setUsers(i)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"id\": \"{{userID}}\",\n        \"username\": \"{{username}}\",\n        \"firstName\": \"{{userFirstName}}\",\n        \"lastName\": \"{{userLastName}}\",\n        \"email\": \"{{userEmail}}\",\n        \"password\": \"{{userPassword}}\",\n        \"phone\": \"{{userPhone}}\",\n        \"userStatus\": 87847\n    },\n    {\n        \"id\": \"{{userID2}}\",\n        \"username\": \"{{username2}}\",\n        \"firstName\": \"{{userFirstName2}}\",\n        \"lastName\": \"{{userLastName2}}\",\n        \"email\": \"{{userEmail2}}\",\n        \"password\": \"{{userPassword2}}\",\n        \"phone\": \"{{userPhone2}}\",\n        \"userStatus\": 87848\n    }\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/createWithList",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"createWithList"
							]
						}
					},
					"response": []
				},
				{
					"name": "Updated user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function setUsers (userNumber) {",
									"    if (userNumber == 1)",
									"        userNumber = \"\";",
									"    pm.environment.set(\"userID\" + userNumber, pm.variables.replaceIn('{{$timestamp}}'));",
									"    pm.environment.set(\"username\" + userNumber, pm.variables.replaceIn('{{$randomUserName}}'));",
									"    pm.environment.set(\"userFirstName\" + userNumber, pm.variables.replaceIn('{{$randomFirstName}}'));",
									"    pm.environment.set(\"userLastName\" + userNumber, pm.variables.replaceIn('{{$randomLastName}}'));",
									"    pm.environment.set(\"userEmail\" + userNumber, pm.variables.replaceIn('{{$randomEmail}}'));",
									"    pm.environment.set(\"userPassword\" + userNumber, pm.variables.replaceIn('{{$randomPassword}}'));",
									"    pm.environment.set(\"userPhone\" + userNumber, pm.variables.replaceIn('{{$randomPhoneNumber}}'));",
									"}",
									"",
									"let numberOfUsers = 1;",
									"setUsers(numberOfUsers);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"{{userID}}\",\n    \"username\": \"{{username}}\",\n    \"firstName\": \"{{userFirstName}}\",\n    \"lastName\": \"{{userLastName}}\",\n    \"email\": \"{{userEmail}}\",\n    \"password\": \"{{userPassword}}\",\n    \"phone\": \"{{userPhone}}\",\n    \"userStatus\": 846580\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/:username",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								":username"
							],
							"variable": [
								{
									"key": "username",
									"value": "{{username}}",
									"description": "(Required) name that need to be updated"
								}
							]
						},
						"description": "This can only be done by the logged in user."
					},
					"response": [
						{
							"name": "Invalid user supplied",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 98839849,\n    \"username\": \"eu culpa\",\n    \"firstName\": \"laboris enim nisi irure incididunt\",\n    \"lastName\": \"aute occaecat dolore ut\",\n    \"email\": \"Excepteur dolore Ut\",\n    \"password\": \"anim sit deserunt\",\n    \"phone\": \"ex dolor incididunt aliquip\",\n    \"userStatus\": -80793257\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/user/:username",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										":username"
									],
									"variable": [
										{
											"key": "username",
											"value": "sed",
											"description": "(Required) name that need to be updated"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "User not found",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 98839849,\n    \"username\": \"eu culpa\",\n    \"firstName\": \"laboris enim nisi irure incididunt\",\n    \"lastName\": \"aute occaecat dolore ut\",\n    \"email\": \"Excepteur dolore Ut\",\n    \"password\": \"anim sit deserunt\",\n    \"phone\": \"ex dolor incididunt aliquip\",\n    \"userStatus\": -80793257\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/user/:username",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										":username"
									],
									"variable": [
										{
											"key": "username",
											"value": "sed",
											"description": "(Required) name that need to be updated"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Logs user into the system",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/login?username={{username}}&password={{userPassword}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"login"
							],
							"query": [
								{
									"key": "username",
									"value": "{{username}}",
									"description": "(Required) The user name for login"
								},
								{
									"key": "password",
									"value": "{{userPassword}}",
									"description": "(Required) The password for login in clear text"
								}
							]
						}
					},
					"response": [
						{
							"name": "Invalid username/password supplied",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/user/login?username=sed&password=sed",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"login"
									],
									"query": [
										{
											"key": "username",
											"value": "sed"
										},
										{
											"key": "password",
											"value": "sed"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Find logged in user by username",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/:username",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								":username"
							],
							"variable": [
								{
									"key": "username",
									"value": "{{username}}",
									"description": "(Required) The name that needs to be fetched. Use user1 for testing. "
								}
							]
						}
					},
					"response": [
						{
							"name": "Invalid username supplied",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/user/:username",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										":username"
									],
									"variable": [
										{
											"key": "username",
											"value": "sed",
											"description": "(Required) The name that needs to be fetched. Use user1 for testing. "
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "User not found",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/user/:username",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										":username"
									],
									"variable": [
										{
											"key": "username",
											"value": "sed",
											"description": "(Required) The name that needs to be fetched. Use user1 for testing. "
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Logs out current logged in user session",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/:username",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								":username"
							],
							"variable": [
								{
									"key": "username",
									"value": "{{username2}}",
									"description": "(Required) The name that needs to be deleted"
								}
							]
						},
						"description": "This can only be done by the logged in user."
					},
					"response": [
						{
							"name": "Invalid username supplied",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/user/:username",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										":username"
									],
									"variable": [
										{
											"key": "username",
											"value": "sed",
											"description": "(Required) The name that needs to be deleted"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "User not found",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/user/:username",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										":username"
									],
									"variable": [
										{
											"key": "username",
											"value": "sed",
											"description": "(Required) The name that needs to be deleted"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.test(\"Response time is less than 1000ms\", function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(1000);",
					"});",
					"",
					"emptyBody = false;// flag initialized",
					"var responseCode = pm.response.code;",
					"",
					"if (responseBody!=null && responseBody.length==0)",
					"    emptyBody = true;",
					"else",
					"    var responseJSON = pm.response.json();// if response is not empty can be parsed as JSON, else fails",
					"",
					"switch (responseCode) {",
					"    case 200:",
					"    case 201:",
					"    case 202:",
					"        pm.test(`Status code ${responseCode}: Request successfully processed`, function () {",
					"            pm.response.to.not.be.error;",
					"            pm.response.to.not.have.jsonBody(\"error\");",
					"        });",
					"    break;",
					"    case 404:",
					"        if (emptyBody) {",
					"            pm.test(\"Status code 404: no response body\", function () {",
					"                pm.expect.fail();",
					"            });",
					"        } else {",
					"            pm.test(`Status code 404: ${responseJSON.message} (possible response inconsistency due server error)`, function () {",
					"                pm.expect.fail();",
					"            });",
					"        }",
					"    break;",
					"    default:",
					"        pm.test(`Status code ${responseCode}: Response error code not expected by test`, function () {",
					"            pm.expect.fail();",
					"        });",
					"}"
				]
			}
		}
	]
}